# -*- coding: utf-8 -*-
"""
/***************************************************************************
                                 A QGIS WFS plugin

 This plugin connect to WPS via OWSLib.

 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-08-04
        git sha              : $Format:%H$
        copyright            : (C) 2020 by OpenGeoLabs
        email                : info@opengeolabs.cz
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import webbrowser

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt import QtGui
from qgis.utils import iface
from qgis.core import *
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtWidgets import *
from qgis.gui import *

from .ui_settings import Ui_Settings

import importlib, inspect
import time

from .connect import *

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
WIDGET_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'world_from_space_widget_base.ui'))


class WorldFromSpaceWidget(QDockWidget, WIDGET_CLASS):
    def __init__(self, iface, parent=None):
        """Constructor."""
        super(WorldFromSpaceWidget, self).__init__(parent)
        # TODO put into plugin settings
        self.url_polygons = 'https://api-dynacrop.worldfromspace.cz/api/v2/polygons'
        self.url_processing_request = 'https://api-dynacrop.worldfromspace.cz/api/v2/processing_request'
        self.iface = iface
        self.pluginPath = os.path.dirname(__file__)
        self.settingsPath = self.pluginPath + "/../../../qgis_patrac_settings"
        QDockWidget.__init__(self, None)
        self.setupUi(self)
        self.settingsdlg = Ui_Settings(self.pluginPath, self)
        self.pushButtonSettings.clicked.connect(self.showSettings)
        self.pushButtonRegisterPolygons.clicked.connect(self.createPolygons)
        self.pushButtonGetIndex.clicked.connect(self.createProcessingRequests)
        self.polygons = []
        self.requests = []
        self.loadPolygons()
        self.loadIndexesList()
        self.loadSettings()
        # self.pushButtonAbout.setIcon(QIcon(os.path.join(os.path.dirname(__file__), "icons/cropped-opengeolabs-logo-small.png")))
        # self.pushButtonAbout.clicked.connect(self.showAbout)

    def loadSettings(self):
        if os.path.exists(self.settingsPath + "/settings.json"):
            with open(self.settingsPath + "/settings.json") as json_file:
                self.settings = json.load(json_file)

    def showSettings(self):
        self.settingsdlg.updateSettings()
        self.settingsdlg.show()

    def loadIndexesList(self):
        indexes = ["NDVI", "EVI", "NDWI", "NDMI", "LAI", "fAPAR", "CWC", "CCC"]
        for index in indexes:
            self.comboBoxIndexes.addItem(index)

    def loadPolygons(self):
        # TODO load form JSON
        # TODO Geometry?
        self.polygons = [
            {"layer": "ABC.shp", "fid": 1, "id": 42173},
            {"layer": "ABC.shp", "fid": 2, "id": 42174},
                          ]
    def polygonIsRegistered(self, polygon):
        # We do not want to register polygon if it is already registered
        for pol in self.polygons:
            if pol['layer'] == polygon['layer'] and pol['fid'] == polygon['fid']:
                return pol['id']
        return None

    def createPolygons(self):
        # TODO do it for more than one polygon
        # Wait always until the previous polygon is responsed + 1 s
        polygon = {"layer": "ABC.shp", "fid": 1}
        polid = self.polygonIsRegistered(polygon)
        if polid is not None:
            self.listWidgetPolygons.addItem(str(polid))
            self.pushButtonGetIndex.setEnabled(True)
        else:
            self.createPolygon()
            # TODO wait some time then check polygons status
            self.pushButtonGetIndex.setEnabled(True)

    def createPolygon(self):
        self.createpolygon = Connect()
        self.createpolygon.setType('POST')
        self.createpolygon.setUrl(self.url_polygons)
        # TODO get from user
        data = {
            "geometry": "POLYGON((16.609153599499933 49.20045317863389,16.61297306513714 49.199219336662225,16.61524757838177 49.19759286157719,16.616577954053156 49.195910244858794,16.61400303339886 49.195265226606885,16.6094540069096 49.197368515988586,16.608381123303644 49.19863044668781,16.609153599499933 49.20045317863389))",
            "api_key": self.settings['apikey'],
            "max_mean_cloud_cover": 0.1,
            "smi_enabled": False
        }
        self.createpolygon.setData(json.dumps(data))
        self.createpolygon.statusChanged.connect(self.onCreatePolygonResponse)
        self.createpolygon.start()

    def onCreatePolygonResponse(self, response):
        if response.status == 200:
            # QMessageBox.information(self.parent.iface.mainWindow(), self.tr("INFO"), self.tr("Polygon registered"))
            print(response.data)
            response_json = json.loads(response.data)
            self.listWidgetPolygons.addItem(str(response_json["id"]))
        else:
            print("ERROR")
            # QMessageBox.information(self.parent.iface.mainWindow(), self.tr("ERROR"), self.tr("Polygon can not be registered"))

    def createProcessingRequests(self):
        # TODO do it for more than one polygon
        self.createProcessingRequest()
        # limit = 10
        # time_waiting = 0
        # while time_waiting < limit and len(self.requests) < 1:
        #     time.sleep(2)
        #     time_waiting += 1
        #     print("WAITING: " + str(time_waiting))
        #     print(self.requests)
        # if len(self.requests) > 0:
        #     self.getProcessingRequestInfo(self.requests[0])

    def createProcessingRequest(self):
        self.createprocessingrequest = Connect()
        self.createprocessingrequest.setType('POST')
        self.createprocessingrequest.setUrl(self.url_processing_request)
        # TODO get from user
        data = {
            "rendering_type": "field_zonation",
            "polygon_id": 40799,
            "date_from": "2020-09-14",
            "date_to": "2020-09-30",
            "layer": self.comboBoxIndexes.currentText(),
            "number_of_zones": 16,
            "api_key": self.settings['apikey']
        }
        self.createprocessingrequest.setData(json.dumps(data))
        self.createprocessingrequest.statusChanged.connect(self.onCreateProcessingRequestResponse)
        self.createprocessingrequest.start()

    def onCreateProcessingRequestResponse(self, response):
        if response.status == 200:
            # QMessageBox.information(self.parent.iface.mainWindow(), self.tr("INFO"), self.tr("Polygon registered"))
            # print(response.data)
            response_json = json.loads(response.data)
            self.requests.append(response_json["id"])
            print("RESPONSE")
            print(self.requests)
            time.sleep(2)
            self.getProcessingRequestInfo(response_json["id"])
        else:
            print("ERROR")
            self.requests.append(-1)
            # QMessageBox.information(self.parent.iface.mainWindow(), self.tr("ERROR"), self.tr("Polygon can not be registered"))

    def getProcessingRequestInfo(self, id):
        self.getprocessingrequestinfo = Connect()
        self.getprocessingrequestinfo.setType('GET')
        self.getprocessingrequestinfo.setUrl(self.url_processing_request + "/" + str(id) + "?api_key=" + self.settings['apikey'])
        self.getprocessingrequestinfo.statusChanged.connect(self.onGetProcessingRequestInfoResponse)
        self.getprocessingrequestinfo.start()

    def onGetProcessingRequestInfoResponse(self, response):
        if response.status == 200:
            # QMessageBox.information(self.parent.iface.mainWindow(), self.tr("INFO"), self.tr("Polygon registered"))
            print("REQUEST INFO:")
            print(response.data)
            data = response.data.read().decode('utf-8')
            response_json = json.loads(data)
            url = "type=xyz&url=" + response_json["result"]["tiles_color"]
            layer = QgsRasterLayer(url, "request_40799", 'wms')
            # TODO check if the layer is valid
            QgsProject.instance().addMapLayer(layer)
        else:
            print("ERROR")
